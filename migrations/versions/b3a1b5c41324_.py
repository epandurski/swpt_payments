"""empty message

Revision ID: b3a1b5c41324
Revises: 953d40d6b4e6
Create Date: 2019-08-27 19:47:47.469200

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b3a1b5c41324'
down_revision = '953d40d6b4e6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('canceled_formal_offer_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_id', sa.BigInteger(), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_id')
    )
    op.create_table('created_formal_offer_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('payee_offer_announcement_id', sa.BigInteger(), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_id')
    )
    op.create_table('failed_payment_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_payment_order_seqnum', sa.Integer(), nullable=False),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_id', 'payer_creditor_id', 'payer_payment_order_seqnum')
    )
    op.create_table('finalize_prepared_transfer_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.Column('transfer_info', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'signal_id')
    )
    op.create_table('formal_offer',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False, comment='The payee, also the one that is responsible to supply the goods or services.'),
    sa.Column('offer_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('offer_secret', postgresql.BYTEA(), nullable=False, comment='A random sequence of bytes that the potential payer should know in order to view the offer or make a payment.'),
    sa.Column('debtor_ids', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=False, comment='The payment should go through one of these debtors. Each element in this array must have a corresponding element in the `debtor_amounts` array. Note thatthe database schema allows some or all of the elements to be `None`, which should be handled with care.'),
    sa.Column('debtor_amounts', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=False, comment='Each element in this array must have a corresponding element in the `debtor_ids` array. Note that the database schema allows one debtor ID to occur more than once in the `debtor_ids` array, each time with a different corresponding amount. The payer is expected to transfer one of the amounts corresponding to the chosen debtor. Also note that the database schema allows some or all of the `debtor_amounts` elements to be `None` or negative numbers, which should be handled as if they were zeros.'),
    sa.Column('description', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='A more or less detailed description of the goods or services that will be supplied if a payment is made to the offer. `NULL` means that the payee will compensate the payer by an automated reciprocal payment. In this case, and only in this case, the `reciprocal_payment_debtor_id` column can be set to a non-NULL value.'),
    sa.Column('reciprocal_payment_debtor_id', sa.BigInteger(), nullable=True, comment='The ID of the debtor through which the reciprocal payment will go.'),
    sa.Column('reciprocal_payment_amount', sa.BigInteger(), server_default=sa.text('0'), nullable=False, comment='The amount to be transferred in the reciprocate payment.'),
    sa.Column('valid_until_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='The offer will not be valid after this deadline.'),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('array_ndims(debtor_amounts) = 1'),
    sa.CheckConstraint('array_ndims(debtor_ids) = 1'),
    sa.CheckConstraint('cardinality(debtor_ids) = cardinality(debtor_amounts)'),
    sa.CheckConstraint('description IS NULL OR reciprocal_payment_debtor_id IS NULL'),
    sa.CheckConstraint('reciprocal_payment_amount >= 0'),
    sa.CheckConstraint('reciprocal_payment_debtor_id IS NOT NULL OR reciprocal_payment_amount = 0'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_id'),
    comment='Represents an offer to supply some goods or services for a stated price.'
    )
    op.create_table('payment_order',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_payment_order_seqnum', sa.Integer(), nullable=False, comment='A number generated by the payer. It is used to distinguish between several payment orders issued against one offer.'),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False, comment='The ID of the debtor through which the payment should go. Must be one of the values in the `formal_offer.debtor_ids` array.'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The amount to be transferred in the payment. Must be equal to the corresponding value in the `formal_offer.debtor_amounts` array.'),
    sa.Column('payment_coordinator_request_id', sa.BigInteger(), server_default=sa.text("nextval('payment_coordinator_request_id_seq')"), nullable=False, comment='This is the value of the `coordinator_request_id` parameter, which has been sent with the `prepare_transfer` message for the payment. The value of `payee_creditor_id` is sent as the `coordinator_id` parameter. `coordinator_type` is "payment".'),
    sa.Column('payment_transfer_id', sa.BigInteger(), nullable=True, comment='This value, along with `debtor_id` and `payer_creditor_id` uniquely identifies the prepared transfer for the payment.'),
    sa.Column('reciprocal_payment_transfer_id', sa.BigInteger(), nullable=True, comment='When a reciprocal payment is required, this value along with `formal_offer.reciprocal_payment_debtor_id` and `payee_creditor_id` uniquely identifies the prepared transfer for the reciprocal payment. The reciprocal payment should be initiated only after the primary payment has been prepared successfully. The value of the `coordinator_request_id` parameter for the reciprocal payment should be `-payment_coordinator_request_id` (always a negative number). `coordinator_type` should be "payment".'),
    sa.Column('finalized_at_ts', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint('amount >= 0'),
    sa.CheckConstraint('payment_coordinator_request_id > 0'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_id', 'payer_creditor_id', 'payer_payment_order_seqnum'),
    comment='Represents a recent order from a payer to make a payment to an offer.'
    )
    op.create_index('idx_payment_coordinator_request_id', 'payment_order', ['payee_creditor_id', 'payment_coordinator_request_id'], unique=True)
    op.create_table('payment_proof',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False, comment='The payee, also the one that is responsible to supply the goods or services.'),
    sa.Column('proof_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('proof_secret', postgresql.BYTEA(), nullable=False, comment='A random sequence of bytes that the interested party should know in order to view the payment proof.'),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False, comment='The payer.'),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False, comment='The ID of the debtor through which the payment went. Must be one of the values in the `formal_offer.debtor_ids` array.'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The transferred amount. Must be equal to the corresponding value in the `formal_offer.debtor_amounts` array.'),
    sa.Column('paid_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('offer_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('offer_description', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='An exact copy of the `formal_offer.description` column. Note that this can not be `NULL` because payment proofs are not generated for offers with no description.'),
    sa.CheckConstraint('amount >= 0'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'proof_id'),
    comment='Represents an evidence that a payment has been made to an offer. (The corresponding offer has been deleted.)'
    )
    op.create_table('prepare_transfer_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('min_amount', sa.BigInteger(), nullable=False),
    sa.Column('max_amount', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('max_amount >= min_amount'),
    sa.CheckConstraint('min_amount > 0'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'coordinator_request_id')
    )
    op.create_table('successful_payment_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_payment_order_seqnum', sa.Integer(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('paid_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('proof_id', sa.BigInteger(), nullable=True),
    sa.Column('proof_secret', postgresql.BYTEA(), nullable=True),
    sa.CheckConstraint('amount >= 0'),
    sa.CheckConstraint('proof_secret IS NOT NULL OR proof_id IS NULL'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_id', 'payer_creditor_id', 'payer_payment_order_seqnum')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('successful_payment_signal')
    op.drop_table('prepare_transfer_signal')
    op.drop_table('payment_proof')
    op.drop_index('idx_payment_coordinator_request_id', table_name='payment_order')
    op.drop_table('payment_order')
    op.drop_table('formal_offer')
    op.drop_table('finalize_prepared_transfer_signal')
    op.drop_table('failed_payment_signal')
    op.drop_table('created_formal_offer_signal')
    op.drop_table('canceled_formal_offer_signal')
    # ### end Alembic commands ###
