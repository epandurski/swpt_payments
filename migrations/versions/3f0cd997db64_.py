"""empty message

Revision ID: 3f0cd997db64
Revises: 
Create Date: 2019-08-15 21:54:27.664014

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3f0cd997db64'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('canceled_offer_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_key', postgresql.BYTEA(length=16), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_key')
    )
    op.create_table('created_offer_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_key', postgresql.BYTEA(length=16), nullable=False),
    sa.Column('payee_announcement_id', sa.BigInteger(), nullable=False),
    sa.Column('status', sa.SmallInteger(), nullable=False),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_key')
    )
    op.create_table('failed_payment_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_order_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_key', postgresql.BYTEA(length=16), nullable=False),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'signal_id')
    )
    op.create_table('offer',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False, comment='The payee, also the one that is responsible to supply the goods or services.'),
    sa.Column('offer_key', postgresql.BYTEA(length=16), nullable=False, comment='A random sequence of bytes. Along with `payee_creditor_id` uniquely identifies the offer. Should be impossible to guess.'),
    sa.Column('description', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='A more or less detailed description of the offer.'),
    sa.Column('debtor_ids', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=False, comment='The payment should go through one of these debtors. Each element in this array must have a corresponding element in the `debtor_amounts` array. Note thatthe database schema allows some or all of the elements to be `None`, which should be handled with care.'),
    sa.Column('debtor_amounts', postgresql.ARRAY(sa.BigInteger(), dimensions=1), nullable=False, comment='Each element in this array must have a corresponding element in the `debtor_ids` array. Note that the database schema allows one debtor ID to occur more than once in the `debtor_ids` array, each time with a different corresponding amount. The payer is expected to transfer one of the amounts corresponding to the chosen debtor. Also note that the database schema allows some or all of the `debtor_amounts` elements to be `None` or a negative number, which should be handled as if they were zeros.'),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment='Additional offer status flags.'),
    sa.Column('valid_until_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='The offer will not be valid after this deadline.'),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('array_ndims(debtor_amounts) = 1'),
    sa.CheckConstraint('array_ndims(debtor_ids) = 1'),
    sa.CheckConstraint('cardinality(debtor_ids) = cardinality(debtor_amounts)'),
    sa.CheckConstraint('length(offer_key) = 16'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'offer_key'),
    comment='Represents an offer to supply some goods or services for a stated price.'
    )
    op.create_table('payment_proof',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False, comment='The payee, also the one that is responsible to supply the goods or services.'),
    sa.Column('proof_key', postgresql.BYTEA(length=16), nullable=False, comment='A random sequence of bytes. Along with `payee_creditor_id` uniquely identifies the payment proof. Should be impossible to guess.'),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False, comment='The payer.'),
    sa.Column('description', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='An exact copy of the `offer.description` column.'),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False, comment='The ID of the debtor through which the payment went. Must be one of the values in the `offer.debtor_ids` array.'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The transferred amount. Must be equal to the corresponding value in the `offer.debtor_amounts` array.'),
    sa.Column('paid_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('amount >= 0'),
    sa.CheckConstraint('length(proof_key) = 16'),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'proof_key'),
    comment='Represents an evidence that a payment has been made to an offer. (The corresponding offer is deleted.)'
    )
    op.create_table('successful_payment_signal',
    sa.Column('payee_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('payer_order_id', sa.BigInteger(), nullable=False),
    sa.Column('offer_key', postgresql.BYTEA(length=16), nullable=False),
    sa.Column('proof_key', postgresql.BYTEA(length=16), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('paid_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('payee_creditor_id', 'payer_creditor_id', 'payer_order_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('successful_payment_signal')
    op.drop_table('payment_proof')
    op.drop_table('offer')
    op.drop_table('failed_payment_signal')
    op.drop_table('created_offer_signal')
    op.drop_table('canceled_offer_signal')
    # ### end Alembic commands ###
